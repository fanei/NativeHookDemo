apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.xyzlf.demo.nativehook"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation name: 'SMSSDK-3.7.1', ext: 'aar'
    implementation name: 'MobGuardMCFP-2021.0531.2047', ext: 'aar'
    implementation name: 'shanyan_sdk_v2.4.2.6', ext: 'aar'
    implementation name: 'Baidu_MobAds_SDK-release_v9.16', ext: 'aar' // 百度SDK aar
//    releaseImplementation name: 'mp4compose-release', ext: 'aar'
//    debugImplementation name: 'mp4compose-debug', ext: 'aar'

    // 广点通
    implementation(name: 'GDTSDK.unionNormal.4.373.1243', ext: 'aar')
    // oppo 广告
    implementation(name: 'mobad_normal_pub_354_2020_05_19', ext: 'aar')
    // 华为 广告
    implementation(name: 'huawei-pps-sdk-android-splash-13.4.40.302', ext: 'aar')
    implementation(name: 'huawei-pps-sdk-android-base-13.4.40.302', ext: 'aar')
    implementation(name: 'huawei-pps-sdk-android-native-13.4.40.302', ext: 'aar')
    implementation(name: 'huawei-pps-sdk-android-reward-13.4.40.302', ext: 'aar')
    // 小米广告sdk
    implementation(name: 'mimo-ad-sdk_V5.0.6', ext: 'aar')
    // 上海易介广告sdk
    implementation(name: 'yijie_juhe_sdk_v5300012_202110181430', ext: 'aar')

    // 乐播sdk 版本号31880 自己裁切v7包
    implementation name: 'sdk-lecast-release', ext: 'aar'
    // 百川  支付宝 noUtdid
    implementation(name: 'alipaySdk-15.6.4-20190611174359-noUtdid', ext: 'aar')
    implementation 'org.jetbrains.anko:anko-commons:0.10.5'

    //oaid
    implementation(name: 'oaid_sdk_1.0.25', ext: 'aar')
}


tasks.whenTaskAdded { task ->
    println(" ---task.name---- " + task.name)
    if (task.name=='mergeDebugNativeLibs') {
        task.doFirst {
            println("==========================================================")
            def v7a = []
            def arm64 = []
            it.inputs.files.each { file ->
                if (file.absolutePath.endsWith("/jni")) {
//                    println("==========" + file.absolutePath)
                    if (file.isDirectory()) {
                        file.listFiles().each { soFileDir ->
                            if (soFileDir.absolutePath.contains("armeabi-v7a")) {
                                if (soFileDir.isDirectory()) {
                                    soFileDir.listFiles().each {
                                        println(it.absolutePath)
                                        v7a.add(it.name)
                                    }
                                }
                            }
                            if (soFileDir.absolutePath.contains("arm64-v8a")) {
                                if (soFileDir.isDirectory()) {
                                    soFileDir.listFiles().each {
                                        println(it.absolutePath)
                                        arm64.add(it.name)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            println("v7a size: ${v7a.size()}")
            println("arm64 size: ${arm64.size()}")
            println("so in v7a, but not in arm64:")
            v7a.each {
                if (!arm64.contains(it)) {
                    println("$it")
                }
            }
            println("==========================================================")
        }
    }
}
